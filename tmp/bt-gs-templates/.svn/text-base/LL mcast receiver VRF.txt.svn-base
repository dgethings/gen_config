interfaces {
    $physical_interface$  {
        description "$physical_interface_description$";
        traps;
        vlan-tagging;
        hierarchical-scheduler;
        mtu 1518;
        hold-time up 2000 down 2000;
        unit $logical_interface$ {
            description $subinterface_description$;
            vlan-id $vlan$;
            family inet {
                mtu 1500;
                address $ip_address$/30;
            }
        }
    }
	lt-$fpc$/$pic$/10 {
        unit $subinterface_ID_1$ {
            description "Interconnects VRF $customer_vrf_name$ -> VRF $transport_vrf_name$";
            encapsulation vlan;
            vlan-id 100;
            peer-unit $subinterface_ID_2$;
            family inet {
                address $even_numbered_ip_address$/31;
            }
        }
        unit $subinterface_ID_2$  {
            description "Interconnects VRF $transport_vrf_name$ -> VRF $customer_vrf_name$ ";
            encapsulation vlan;
            vlan-id 100;
            peer-unit $subinterface_ID_1$;
            family inet {
                address $odd_numbered_ip_address$/31;
            }
        }
    }
    lo0 {
        unit $vrf_lo0_logical_int$ {
            description "$vrf_lo0_int_descr$";
            family inet {
                address $dummy_ip_address$/32;
                address $vrf_lo0_ip_addr$/32  {
                    primary;
                    preferred;
                }
            }
        }
    }
}
policy-options {
    community $multicast_client_vrf_import_rt_set$ members target:12641:$Provider_VPN_RT$;
    policy-statement $multicast_client_vrf_import_policy$ {
        term VPN-routes {
            from {
                protocol bgp;
                community $multicast_client_vrf_import_rt_set$;
            }
            then accept;
        }
        term explicit-deny {
            then reject;
        }
    }
    community $multicast_client_vrf_export_rt_set$ members target:12641:$Client_VPN_RT$;
    policy-statement $multicast_client_vrf_export_policy$ {
        term block-dummy-loopback {
            from {
                protocol direct;
                route-filter $dummy_ip_address$/32 exact;
            }
            then reject;
        }
        term VPN-routes {
            from {
                protocol bgp;
            }
            then {
                community add $multicast_client_vrf_export_rt_set$;
                community add community-BLUE-CORE-DIVERSITY-1;
                /* substitute with “community add community-RED-CORE-DIVERSITY-1;” on RED PEs */
                community add community-BLUE-CORE-DIVERSITY-2;
                /* substitute with “community add community-RED-CORE-DIVERSITY-2;” on RED PEs */
                accept;
            }
        }
        term explicit-deny {
            then reject;
        }
    }
}
routing-instances {
    $multicast_client_vrf_name$ {
        instance-type vrf;
        interface lo0.$vrf_lo0_logical_int$;
        interface $physical_interface$.$logical_interface$;
        interface lt-$fpc$/$pic$/10.$subinterface_ID_1$;
        route-distinguisher 12641:$RD$;
        vrf-import $multicast_client_vrf_import_policy$;
        vrf-export $multicast_client_vrf_export_policy$;
        vrf-table-label;
        routing-options {
            auto-export;
        }
        protocols {
            bgp {
                damping;
                group ebgp {
                    type external;
                    log-updown;
                    neighbor $CE_ip_address$ {
                        import [ CUSTOMER-BGP-DAMPING $CE_import_policy$ ];
                        export $CE_export_policy$;
                        peer-as $CE_AS_Number$;
                        hold-time 30;
                        out-delay 0;
                        family inet {
                            any {
                                prefix-limit {
                                    maximum $prefix_limit$;
                                    teardown $threshold$ idle-timeout forever;
                            }
                        }
                    }
                }
            }
            pim {
                rpf-selection {
                    group $RP_address$/32 {
                        wildcard-source {
                            next-hop $odd_numbered_ip_address$;
                        }
                    }
                }
                rp {
                    static {
                        address $RP_address$ {
                             group-ranges {
                               $customer_multicast_group_address$/32;
                            }
                        }
                    }
                }
                interface $physical_interface$.$logical_interface$ {
                    mode sparse;
                    version 2;
                }
                interface lt-$fpc$/$pic$/10.$subinterface_ID_1$;
            }
        }
    }
	$transport_vrf_name$ {
		interface lt-$fpc$/$pic$/10.$subinterface_ID_2$;
		protocols {
			pim {
				interface lt-$fpc$/$pic$/10.$subinterface_ID_2$;
			}
		}
	}
}
